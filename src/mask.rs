use crate::matrix::{Matrix, Module};

impl<const N: usize> Matrix<N> {
    pub fn mask(&self, reference: u8) -> Self {
        let condition = match reference {
            0b000 => |x, y| (x + y) % 2 == 0,
            0b001 => |x, _y| x % 2 == 0,
            0b010 => |_x, y| y % 3 == 0,
            0b011 => |x, y| (x + y) % 3 == 0,
            0b100 => |x, y| ((x / 2) + (y / 3)) % 2 == 0,
            0b101 => |x, y| (x * y) % 2 + (x * y) % 3 == 0,
            0b110 => |x, y| ((x * y) % 2 + (x * y) % 3) % 2 == 0,
            0b111 => |x, y| ((x + y) % 2 + (x * y) % 3) % 2 == 0,
            _ => panic!(),
        };
        let mut masked = *self;
        masked.data.iter_mut().enumerate().for_each(|(x, row)| {
            row.iter_mut().enumerate().for_each(|(y, module)| {
                if let Module::Filled(color) = module {
                    if condition(x, y) {
                        *module = Module::Filled(color.inverse())
                    }
                }
            })
        });
        masked
    }

}

#[cfg(test)]
mod tests {
    use crate::matrix::{Color, Matrix, Module};

    #[test]
    fn mask_pattern0() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(0);

        assert_eq!(
            format!("{:?}", masked),
            "\
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
_█_█_█_█_█_█_█_█_█_█_
█_█_█_█_█_█_█_█_█_█_█
"
        );
    }

    #[test]
    fn mask_pattern1() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(1);

        assert_eq!(
            format!("{:?}", masked),
            "\
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
_____________________
█████████████████████
"
        );
    }

    #[test]
    fn mask_pattern2() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(2);

        assert_eq!(
            format!("{:?}", masked),
            "\
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
█__█__█__█__█__█__█__
"
        );
    }

    #[test]
    fn mask_pattern3() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(3);

        assert_eq!(
            format!("{:?}", masked),
            "\
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
█__█__█__█__█__█__█__
__█__█__█__█__█__█__█
_█__█__█__█__█__█__█_
"
        );
    }

    #[test]
    fn mask_pattern4() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(4);

        assert_eq!(
            format!("{:?}", masked),
            "\
███___███___███___███
███___███___███___███
___███___███___███___
___███___███___███___
███___███___███___███
███___███___███___███
___███___███___███___
___███___███___███___
███___███___███___███
███___███___███___███
___███___███___███___
___███___███___███___
███___███___███___███
███___███___███___███
___███___███___███___
___███___███___███___
███___███___███___███
███___███___███___███
___███___███___███___
___███___███___███___
███___███___███___███
"
        );
    }

    #[test]
    fn mask_pattern5() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(5);

        assert_eq!(
            format!("{:?}", masked),
            "\
█████████████████████
█_____█_____█_____█__
█__█__█__█__█__█__█__
█_█_█_█_█_█_█_█_█_█_█
█__█__█__█__█__█__█__
█_____█_____█_____█__
█████████████████████
█_____█_____█_____█__
█__█__█__█__█__█__█__
█_█_█_█_█_█_█_█_█_█_█
█__█__█__█__█__█__█__
█_____█_____█_____█__
█████████████████████
█_____█_____█_____█__
█__█__█__█__█__█__█__
█_█_█_█_█_█_█_█_█_█_█
█__█__█__█__█__█__█__
█_____█_____█_____█__
█████████████████████
█_____█_____█_____█__
█__█__█__█__█__█__█__
"
        );
    }

    #[test]
    fn mask_pattern6() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(6);

        assert_eq!(
            format!("{:?}", masked),
            "\
█████████████████████
███___███___███___███
██_██_██_██_██_██_██_
█_█_█_█_█_█_█_█_█_█_█
█_██_██_██_██_██_██_█
█___███___███___███__
█████████████████████
███___███___███___███
██_██_██_██_██_██_██_
█_█_█_█_█_█_█_█_█_█_█
█_██_██_██_██_██_██_█
█___███___███___███__
█████████████████████
███___███___███___███
██_██_██_██_██_██_██_
█_█_█_█_█_█_█_█_█_█_█
█_██_██_██_██_██_██_█
█___███___███___███__
█████████████████████
███___███___███___███
██_██_██_██_██_██_██_
"
        );
    }

    #[test]
    fn mask_pattern7() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_whole(Module::Filled(Color::White));
        let masked = matrix.mask(7);

        assert_eq!(
            format!("{:?}", masked),
            "\
█_█_█_█_█_█_█_█_█_█_█
___███___███___███___
█___███___███___███__
_█_█_█_█_█_█_█_█_█_█_
███___███___███___███
_███___███___███___██
█_█_█_█_█_█_█_█_█_█_█
___███___███___███___
█___███___███___███__
_█_█_█_█_█_█_█_█_█_█_
███___███___███___███
_███___███___███___██
█_█_█_█_█_█_█_█_█_█_█
___███___███___███___
█___███___███___███__
_█_█_█_█_█_█_█_█_█_█_
███___███___███___███
_███___███___███___██
█_█_█_█_█_█_█_█_█_█_█
___███___███___███___
█___███___███___███__
"
        );
    }

    #[test]
    fn mask() {
        let mut matrix = Matrix::<21>::new();
        matrix.fill_finder_patterns();
        matrix.fill_reserved();
        matrix.fill_timing_pattern();

        matrix.place_data(&[
            0b00010000, 0b00100000, 0b00001100, 0b01010110, 0b01100001, 0b10000000, 0b11101100,
            0b00010001, 0b11101100, 0b00010001, 0b11101100, 0b00010001, 0b11101100, 0b00010001,
            0b11101100, 0b00010001, 0b10100101, 0b00100100, 0b11010100, 0b11000001, 0b11101101,
            0b00110110, 0b11000111, 0b10000111, 0b00101100, 0b01010101,
        ]);

        let masked = matrix.mask(0b010);

        assert_eq!(
            format!("{:?}", masked),
            "\
▓▓▓▓▓▓▓░▒█_██░▓▓▓▓▓▓▓
▓░░░░░▓░▒████░▓░░░░░▓
▓░▓▓▓░▓░▒____░▓░▓▓▓░▓
▓░▓▓▓░▓░▒█___░▓░▓▓▓░▓
▓░▓▓▓░▓░▒_███░▓░▓▓▓░▓
▓░░░░░▓░▒___█░▓░░░░░▓
▓▓▓▓▓▓▓░▓░▓░▓░▓▓▓▓▓▓▓
░░░░░░░░▒__██░░░░░░░░
▒▒▒▒▒▒▓▒▒█__█▒▒▒▒▒▒▒▒
___█_█░██_█_█__█_██__
__█___▓█_█_█_█__█████
____█_░__█_____████__
___███▓██__█_█__█____
░░░░░░░░▒_█████__██__
▓▓▓▓▓▓▓░▒██_█_██_____
▓░░░░░▓░▒_█████___█_█
▓░▓▓▓░▓░▒___█__█_██__
▓░▓▓▓░▓░▒█__█__█_____
▓░▓▓▓░▓░▒_██_█__█_█__
▓░░░░░▓░▒______██_██_
▓▓▓▓▓▓▓░▒███_█__█_█__
"
        );

        let twice_masked = masked.mask(0b010);

        assert_eq!(format!("{:?}", twice_masked), format!("{:?}", matrix),);
    }

}
